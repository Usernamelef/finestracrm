#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

// Configuration
const SCAN_DIRS = ['.', 'src', 'public', 'assets', 'static'];
const IGNORE_DIRS = ['node_modules', 'dist', 'build', '.git', '.next', '.vercel', '.bolt', '.vscode', 'scripts'];
const FILE_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.md', '.json'];

// Mode v√©rification
const CHECK_MODE = process.argv.includes('--check');

// Table de correspondance des renommages
const renameMap = new Map();
const changes = [];

/**
 * Normalise un nom de fichier/dossier en ASCII s√ªr
 */
function sanitizeName(name) {
  // S√©parer nom et extension
  const ext = path.extname(name);
  const baseName = path.basename(name, ext);
  
  // Normalisation Unicode NFKD pour d√©composer les caract√®res accentu√©s
  let normalized = baseName.normalize('NFKD');
  
  // Supprimer les diacritiques (accents)
  normalized = normalized.replace(/[\u0300-\u036f]/g, '');
  
  // Remplacer les guillemets/apostrophes fancy et autres symboles
  normalized = normalized
    .replace(/['']/g, '-')  // Apostrophes typographiques
    .replace(/[""]/g, '-')  // Guillemets typographiques
    .replace(/[√†√°√¢√£√§√•]/g, 'a')
    .replace(/[√®√©√™√´]/g, 'e')
    .replace(/[√¨√≠√Æ√Ø]/g, 'i')
    .replace(/[√≤√≥√¥√µ√∂]/g, 'o')
    .replace(/[√π√∫√ª√º]/g, 'u')
    .replace(/[√Ω√ø]/g, 'y')
    .replace(/[√±]/g, 'n')
    .replace(/[√ß]/g, 'c')
    .replace(/[√¶]/g, 'ae')
    .replace(/[≈ì]/g, 'oe')
    .replace(/[√ü]/g, 'ss')
    .replace(/\s+/g, '-')  // Espaces ‚Üí tirets
    .replace(/[^a-z0-9._-]/gi, '-')  // Tout le reste ‚Üí tirets
    .toLowerCase()
    .replace(/-+/g, '-')  // Compresser les tirets multiples
    .replace(/^-|-$/g, ''); // Supprimer tirets d√©but/fin
  
  // √âviter les noms vides
  if (!normalized) {
    normalized = 'file';
  }
  
  return normalized + ext;
}

/**
 * V√©rifie si un chemin contient des caract√®res non-ASCII
 */
function hasNonASCIIChars(filePath) {
  return !/^[ -~]*$/.test(filePath);
}

/**
 * Parcourt r√©cursivement un r√©pertoire
 */
async function scanDirectory(dirPath, relativePath = '') {
  const items = [];
  
  try {
    const entries = await fs.readdir(dirPath, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);
      const relativeItemPath = path.join(relativePath, entry.name);
      
      // Ignorer les dossiers sp√©cifi√©s
      if (entry.isDirectory() && IGNORE_DIRS.includes(entry.name)) {
        continue;
      }
      
      if (entry.isDirectory()) {
        // Ajouter le dossier
        items.push({
          type: 'directory',
          fullPath,
          relativePath: relativeItemPath,
          name: entry.name
        });
        
        // Parcourir r√©cursivement
        const subItems = await scanDirectory(fullPath, relativeItemPath);
        items.push(...subItems);
      } else {
        // Ajouter le fichier
        items.push({
          type: 'file',
          fullPath,
          relativePath: relativeItemPath,
          name: entry.name
        });
      }
    }
  } catch (error) {
    console.warn(`Impossible de lire le r√©pertoire ${dirPath}:`, error.message);
  }
  
  return items;
}

/**
 * G√®re les collisions de noms
 */
async function resolveNameCollision(dirPath, sanitizedName) {
  let finalName = sanitizedName;
  let counter = 1;
  
  while (true) {
    try {
      await fs.access(path.join(dirPath, finalName));
      // Le fichier existe, essayer avec un suffixe
      const ext = path.extname(sanitizedName);
      const baseName = path.basename(sanitizedName, ext);
      finalName = `${baseName}-${counter}${ext}`;
      counter++;
    } catch {
      // Le fichier n'existe pas, on peut utiliser ce nom
      break;
    }
  }
  
  return finalName;
}

/**
 * Renomme un fichier ou dossier
 */
async function renameItem(item) {
  const sanitizedName = sanitizeName(item.name);
  
  // Si le nom est d√©j√† correct, ne rien faire
  if (item.name === sanitizedName) {
    return null;
  }
  
  const dirPath = path.dirname(item.fullPath);
  const finalName = await resolveNameCollision(dirPath, sanitizedName);
  const newFullPath = path.join(dirPath, finalName);
  const newRelativePath = path.join(path.dirname(item.relativePath), finalName);
  
  try {
    await fs.rename(item.fullPath, newFullPath);
    
    const change = {
      type: item.type,
      oldPath: item.relativePath,
      newPath: newRelativePath,
      oldName: item.name,
      newName: finalName
    };
    
    changes.push(change);
    renameMap.set(item.relativePath, newRelativePath);
    
    console.log(`‚úÖ ${item.type === 'file' ? 'üìÑ' : 'üìÅ'} ${item.relativePath} ‚Üí ${newRelativePath}`);
    
    return change;
  } catch (error) {
    console.error(`‚ùå Erreur lors du renommage de ${item.relativePath}:`, error.message);
    return null;
  }
}

/**
 * Met √† jour les r√©f√©rences dans un fichier
 */
async function updateFileReferences(filePath) {
  try {
    const content = await fs.readFile(filePath, 'utf-8');
    let updatedContent = content;
    let hasChanges = false;
    
    // Parcourir toutes les correspondances de renommage
    for (const [oldPath, newPath] of renameMap.entries()) {
      // Patterns √† rechercher
      const patterns = [
        // Imports/require
        new RegExp(`(['"\`])(\\.?\\/?${oldPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})\\1`, 'g'),
        // URLs relatives dans HTML/CSS
        new RegExp(`(src|href|url)\\s*=\\s*(['"\`])(\\.?\\/?${oldPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})\\2`, 'g'),
        // CSS url()
        new RegExp(`url\\(\\s*(['"\`]?)(\\.?\\/?${oldPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})\\1\\s*\\)`, 'g'),
        // JSON values
        new RegExp(`(['"\`])(\\.?\\/?${oldPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})\\1`, 'g')
      ];
      
      patterns.forEach(pattern => {
        const newContent = updatedContent.replace(pattern, (match, ...groups) => {
          // D√©terminer le bon groupe selon le pattern
          if (groups.length >= 3) {
            // Pattern avec attribut (src, href, etc.)
            return `${groups[0]}="${newPath}"`;
          } else if (groups.length >= 2) {
            // Pattern simple avec quotes
            return `${groups[0]}${newPath}${groups[0]}`;
          } else {
            // Pattern CSS url()
            return `url("${newPath}")`;
          }
        });
        
        if (newContent !== updatedContent) {
          hasChanges = true;
          updatedContent = newContent;
        }
      });
    }
    
    if (hasChanges) {
      await fs.writeFile(filePath, updatedContent, 'utf-8');
      console.log(`üìù R√©f√©rences mises √† jour dans ${filePath}`);
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è Erreur lors de la mise √† jour de ${filePath}:`, error.message);
  }
}

/**
 * G√©n√®re le rapport de changements
 */
async function generateReport() {
  const reportContent = `# Rapport d'assainissement des chemins de fichiers

## R√©sum√©
- **Fichiers renomm√©s**: ${changes.filter(c => c.type === 'file').length}
- **Dossiers renomm√©s**: ${changes.filter(c => c.type === 'directory').length}
- **Total des changements**: ${changes.length}

## D√©tail des changements

${changes.map(change => 
  `### ${change.type === 'file' ? 'üìÑ Fichier' : 'üìÅ Dossier'}
- **Ancien**: \`${change.oldPath}\`
- **Nouveau**: \`${change.newPath}\`
- **Raison**: Caract√®res non-ASCII ou non support√©s

`).join('')}

## R√®gles appliqu√©es
1. Normalisation Unicode NFKD
2. Suppression des diacritiques (√©‚Üíe, √†‚Üía)
3. Remplacement des caract√®res sp√©ciaux par des tirets
4. Conversion en minuscules
5. Compression des tirets multiples
6. Caract√®res autoris√©s: [a-z0-9._-]

---
*Rapport g√©n√©r√© le ${new Date().toLocaleString('fr-FR')}*
`;

  await fs.writeFile(path.join(projectRoot, 'SANITIZE-REPORT.md'), reportContent, 'utf-8');
  console.log('üìã Rapport g√©n√©r√©: SANITIZE-REPORT.md');
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üßπ Assainissement des chemins de fichiers...\n');
  
  // Scanner tous les fichiers et dossiers
  const allItems = [];
  
  for (const scanDir of SCAN_DIRS) {
    const fullScanPath = path.resolve(projectRoot, scanDir);
    
    try {
      await fs.access(fullScanPath);
      const items = await scanDirectory(fullScanPath, scanDir === '.' ? '' : scanDir);
      allItems.push(...items);
    } catch {
      console.log(`üìÅ R√©pertoire ${scanDir} non trouv√©, ignor√©`);
    }
  }
  
  console.log(`üìä ${allItems.length} √©l√©ments trouv√©s\n`);
  
  // Mode v√©rification
  if (CHECK_MODE) {
    console.log('üîç Mode v√©rification activ√©\n');
    
    const problematicPaths = allItems.filter(item => hasNonASCIIChars(item.relativePath));
    
    if (problematicPaths.length > 0) {
      console.log('‚ùå Chemins probl√©matiques d√©tect√©s:\n');
      problematicPaths.forEach(item => {
        console.log(`  ${item.type === 'file' ? 'üìÑ' : 'üìÅ'} ${item.relativePath}`);
      });
      console.log(`\nüí° Ex√©cutez 'npm run sanitize' pour corriger ces probl√®mes.`);
      process.exit(1);
    } else {
      console.log('‚úÖ Tous les chemins sont conformes !');
      process.exit(0);
    }
  }
  
  // Mode renommage
  console.log('üîÑ Renommage en cours...\n');
  
  // Trier par profondeur d√©croissante pour renommer les fichiers avant les dossiers parents
  allItems.sort((a, b) => {
    const depthA = a.relativePath.split(path.sep).length;
    const depthB = b.relativePath.split(path.sep).length;
    return depthB - depthA;
  });
  
  // Renommer les √©l√©ments
  for (const item of allItems) {
    if (hasNonASCIIChars(item.relativePath) || item.name !== sanitizeName(item.name)) {
      await renameItem(item);
    }
  }
  
  if (changes.length === 0) {
    console.log('‚úÖ Aucun renommage n√©cessaire, tous les chemins sont d√©j√† conformes !');
    return;
  }
  
  console.log(`\nüìù Mise √† jour des r√©f√©rences dans les fichiers...\n`);
  
  // Mettre √† jour les r√©f√©rences dans les fichiers
  const allFiles = allItems.filter(item => item.type === 'file');
  
  for (const item of allFiles) {
    const ext = path.extname(item.name).toLowerCase();
    if (FILE_EXTENSIONS.includes(ext)) {
      // Utiliser le nouveau chemin si le fichier a √©t√© renomm√©
      const currentPath = renameMap.get(item.relativePath) || item.relativePath;
      const fullPath = path.resolve(projectRoot, currentPath);
      
      try {
        await fs.access(fullPath);
        await updateFileReferences(fullPath);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Fichier non trouv√©: ${fullPath}`);
      }
    }
  }
  
  // G√©n√©rer le rapport
  await generateReport();
  
  console.log(`\nüéâ Assainissement termin√© !`);
  console.log(`üìä ${changes.length} √©l√©ments renomm√©s`);
  console.log(`üìã Voir SANITIZE-REPORT.md pour le d√©tail`);
}

// Gestion des erreurs
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur fatale:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (error) => {
  console.error('‚ùå Promesse rejet√©e:', error.message);
  process.exit(1);
});

// Ex√©cution
main().catch(error => {
  console.error('‚ùå Erreur lors de l\'ex√©cution:', error.message);
  process.exit(1);
});